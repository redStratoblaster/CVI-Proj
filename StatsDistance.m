function StatsDistance(imgOriginal, imgProcessed)
    figure;
    imshow(imgOriginal);

% Para o 1 e o 2:
    stats1 = regionprops(bwlabel(imgProcessed,8),...
                        'Eccentricity',...
                        'Area',...
                        'Centroid',...
                        'BoundingBox',...
                        'Perimeter',...
                        'MinorAxisLength');

    objIndex = find([stats1.Area] > 1000);
    sz = size(objIndex);    
    for i = 1 : numel(objIndex)
        box1 = InitDraw(i,objIndex,stats1);
        set(box1,'buttondownfcn',{@ShowInfo,i,objIndex,imgOriginal,stats1});
    end
    
    
% Para o 3:
    boundsArray = [];
    boundsArray = derivateBoundaries(imgProcessed);
    title(['Number of objects in the image: ', num2str(sz(2)),...
        '. Click on a region to see its stats.']);
end

function box = InitDraw(i,objIndex,stats)
    statsObj = stats(objIndex);
    boundingBoxI = statsObj(i).BoundingBox;
    box = rectangle('Position',...
              [boundingBoxI(1),...
               boundingBoxI(2),...
               boundingBoxI(3),...
               boundingBoxI(4)],...
              'EdgeColor',[1 0 0],...
              'FaceColor',[1 0 0 0.2]);
    text(statsObj(i).Centroid(1),...
         statsObj(i).Centroid(2),...
         'X',...
         'color','red',...
         'HorizontalAlignment','center',...
         'VerticalAlignment','middle',...
         'FontSize',12);
end

function ShowInfo(~,~,i,objIndex,imgOriginal,stats)
    clf('reset');
    imshow(imgOriginal);
    statsObj = stats(objIndex);
    for index = 1 : numel(objIndex)
        if(index == i)
            
            title(['"X" mark the centroids, Perimeter: ', num2str(statsObj(i).Perimeter),...
                   ', Eccentricity: ', num2str(statsObj(i).Eccentricity),...
                   ' and Area: ', num2str(statsObj(i).Area)]);
            
            boundingBoxI = statsObj(i).BoundingBox;
            rectangle('Position',...
            [boundingBoxI(1),...
             boundingBoxI(2),...
             boundingBoxI(3),...
             boundingBoxI(4)],...
            'EdgeColor',[0 1 0],...
            'FaceColor',[0 1 0 0.2]);
        else            
            x1 = statsObj(i).Centroid(1);
            x2 = statsObj(index).Centroid(1);
            y1 = statsObj(i).Centroid(2);
            y2 = statsObj(index).Centroid(2);
            x=[x1,x2];
            y=[y1,y2];
            line(x,y,'Color','red','LineStyle','--');
            distance = num2str(sqrt((x2-x1)^2+(y2-y1)^2));
            
            text(statsObj(index).Centroid(1),...
                 statsObj(index).Centroid(2)-13,...
                 ['Distance:'],...
                 'color','black',...
                 'HorizontalAlignment', 'center',...
                 'VerticalAlignment', 'middle',...
                 'FontSize',11);
             
             text(statsObj(index).Centroid(1),...
                 statsObj(index).Centroid(2)+13,...
                 [distance],...
                 'color','black',...
                 'HorizontalAlignment', 'center',...
                 'VerticalAlignment', 'middle',...
                 'FontSize',11);
             
        end
        box2 = InitDraw(index,objIndex,stats);
        set(box2,'buttondownfcn',{@ShowInfo,index,objIndex,imgOriginal,stats});
    end
end


function bounds = derivateBoundaries(imgProcessed)
    [boundaries,labeledMatrix] = bwboundaries(imgProcessed,'holes');
    stats2 = regionprops(labeledMatrix,'Area','Centroid');
    threshold = 0.94;
    bounds = [];
    
    hold on
    for i = 1:length(boundaries)
      plot(boundaries{i}(:,2), boundaries{i}(:,1), 'r', 'LineWidth', 2)
    
      % obtain (X,Y) boundary coordinates corresponding to label 'k'
      boundary = boundaries{i};

      % compute a simple estimate of the object's perimeter
      delta_sq = diff(boundary).^2;    
      perimeter = sum(sqrt(sum(delta_sq,2)));

      % obtain the area calculation corresponding to label 'k'
      area = stats2(i).Area;

      % compute the roundness metric
      metric = 4*pi*area/perimeter^2;
      
      bounds = [bounds, metric];

      % display the results
      metric_string = sprintf('%2.2f',metric);

      % mark objects above the threshold with a black circle
      if metric > threshold
        centroid = stats2(i).Centroid;
        plot(centroid(1),centroid(2),'ko');
      end

      text(boundary(1,2),...
           boundary(1,1),...
           metric_string,...
           'Color','black',...
           'FontSize',14,...
           'FontWeight','bold');
    end    
end
